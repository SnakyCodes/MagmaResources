local ifont = render.setup_font("MuseoSansCyrl-700", 12, 500, true, true, false) local pfont = render.setup_font("Verdana", 11, 1100, true, true, false) local keybfont = render.setup_font("Small Fonts", 9, 150, true, false, true) local saufont = render.setup_font("Verdana", 13, 400, true, true, true) local halffont = render.setup_font( "Small Fonts", 9, 450, false, false, true ) local acafont = render.setup_font("Small Fonts", 9, 450, false, false, true ) local acafont1 = render.setup_font("Small Fonts", 14, 150, true, false, true) local print = cheat.notify local acafont2 = render.setup_font("Small Fonts", 11, 450, false, false, true ) local font = render.setup_font("Smallest Pixel-7", 10, 500, true, false, false) local menu = ui local randomz local pitchch = ui.get_int("0Antiaim.pitch") local int = 0 local A=0 local font1 = render.setup_font("Verdana", 13, 500, true, true, false) local Skeet = render.setup_font("Calibri", 29, 700, true, false, false) local font3 = render.setup_font("Verdana", 13, 500, true, true, false) local keybindss = render.setup_font("Verdana", 12, 500, true, true, false) local choke_d = {0, 0, 0, 0, 0, 0} cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") console.execute_client_cmd("clear") console.print_color("|======================================================================================|\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                               Hello, about changelogs!                               |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                               Last update: 1.02.2022                                |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                                 -Invert AA Spam                                      |\n", color.new(122, 195, 250)) console.print_color("|                                 -Invert AA On:Air/Move                               |\n", color.new(122, 195, 250)) console.print_color("|                               -Skeet indicator update                                |\n", color.new(122, 195, 250)) console.print_color("|                        -Added AntiBrute Force:Onshot(others coming soon)             |\n", color.new(122, 195, 250)) console.print_color("|                -Ideal Tick update (now turns on safe points when auto peeking)       |\n", color.new(122, 195, 250)) console.print_color("|        -Fake Lag Randomizer Update:Random 5-16/ Random 10-16/Switch 8-16/Switch 10-16|\n", color.new(122, 195, 250)) console.print_color("|                      -Fixed Leg Breaker (Backwards, slide soon)                      |\n", color.new(122, 195, 250)) console.print_color("|                                  -Added Keybinds                                     |\n", color.new(122, 195, 250)) console.print_color("|                           Discord:https://discord.gg/2PThRWBwuF                      |\n", color.new(122, 195, 250)) console.print_color("|                    Backup discord server:https://discord.gg/7nnTqrGSaC               |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                             coder's discord:guccish#2018                             |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                            Hello, about changelogs!                                  |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                            old update: 20.01.2022                                    |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|                            -Added Body Lean Presets                                  |\n", color.new(122, 195, 250)) console.print_color("|                    -Added Jitter on: Move/Stand/Air/Slow Walk                        |\n", color.new(122, 195, 250)) console.print_color("|               -Added Jitter Range: None/Low Range/Mid Range/High Range               |\n", color.new(122, 195, 250)) console.print_color("|                             -Added Desync on Shot                                    |\n", color.new(122, 195, 250)) console.print_color("|                         -Added Low AntiAim Range on dt                               |\n", color.new(122, 195, 250)) console.print_color("|                              -Added Leg Breaker                                      |\n", color.new(122, 195, 250)) console.print_color("|                                -Added Fake Flick                                     |\n", color.new(122, 195, 250)) console.print_color("|                                -Added Watermark                                      |\n", color.new(122, 195, 250)) console.print_color("|                                 -Added ClanTag                                       |\n", color.new(122, 195, 250)) console.print_color("|                             -Added Skeet Indicators                                  |\n", color.new(122, 195, 250)) console.print_color("|                           -Divine New indicator Update                               |\n", color.new(122, 195, 250)) console.print_color("|======================================================================================|\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) cheat.notify("Divine.lua loaded, have fun!") ui.add_sliderint("https://discord.gg/2PThRWBwuF for getting lua earlier!!") ui.add_sliderint("Rage Settings") ui.add_checkbox("Adaptive Ragebot") ui.add_checkbox("Ideal Tick") ui.add_checkbox("Resolver") ui.add_combobox("Resolver Type:",{"Resolver + Prediction","Jitter Resolver"}) ui.add_checkbox("AntiBrute Resolver") ui.add_checkbox("Desync on Shot") ui.add_sliderint("Anti-Aim Settings") ui.add_combobox("Anti-Aim Types:",{"None","Static-Maximum","Static-Minimum","Fake-Brute","Yaw-Only","Yaw-Only-Math","Skeet-Lag","Divine-Lag","Divine-Legit","Anti-BruteForce","Anti-BruteForce-Sync"}) ui.add_combobox("Yaw Presets:",{"None","Adaptive","Low Range","High Range","Jitter"}) ui.add_combobox("Desync Presets:",{"None","Adaptive","Low Range","High Range","Jitter"}) ui.add_combobox("AA Jitter Range:",{"None","Low Range","Mid Range","High Range"}) ui.add_combobox("AA Jitter on:",{"None","Move","Stand","Air","Slow Walk"}) ui.add_combobox("Body Lean Presets:",{"None","Adaptive","Low Range","High Range","Jitter"}) ui.add_combobox("Invert AA On:",{"None","Air","Move"}) ui.add_combobox("Fake Lag Randomizer",{"None","Random 5-16","Random 10-16","Switch 8-16","Switch 10-16"}) ui.add_checkbox("AntiBrute Force") ui.add_combobox("AntiBrute Force:",{"On Shot"}) ui.add_checkbox("Invert AA Spam") ui.add_checkbox("Fake Flick") ui.add_checkbox("Low desync range on dt") ui.add_checkbox("Pitch Zero") ui.add_checkbox("Lag Sync") ui.add_checkbox("In Air Jitter") ui.add_checkbox("At Targets in Air") ui.add_checkbox("Leg Breaker") ui.add_sliderint("Visuals") ui.add_checkbox("Enable keybinds") ui.add_colorpicker("Color") ui.add_sliderint("x", 0, engine.get_screen_width() - 110) ui.add_sliderint("y", 0, engine.get_screen_height() - 19) ui.add_sliderint("Indicators Type") ui.add_checkbox("Skeet Indicators") ui.add_checkbox("Divine") ui.add_checkbox("Divine New") ui.add_colorpicker("Divine New color") ui.add_checkbox("Acatel") ui.add_checkbox("Half-Life") ui.add_checkbox("Viewmodel in scope") ui.add_sliderint("Miscellaneous") ui.add_checkbox("Divine Clantag") ui.add_checkbox("Divine Killsay") ui.add_checkbox("Divine Watermark") ui.add_colorpicker("color filled") ui.add_checkbox("Ping Spike") ui.add_sliderint("Ping Amount", 0, 300) local d=0;local e=0;local f=0;local g=0;local h=0;local i=0;local j=0; local switch = false local function invertaaon() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_int("Invert AA On:")==0 then end if ui.get_int("Invert AA On:")==1 and cmd.get_send_packet() and engine.get_active_key(0x20) == true then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) 
end end if ui.get_int("Invert AA On:")==2 and cmd.get_send_packet() and engine.get_active_key(0x10) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_int("Invert AA On:")==2 and cmd.get_send_packet() and engine.get_active_key(0x44) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_int("Invert AA On:")==2 and cmd.get_send_packet() and engine.get_active_key(0x41) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_int("Invert AA On:")==2 and cmd.get_send_packet() and engine.get_active_key(0x57) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_int("Invert AA On:")==2 and cmd.get_send_packet() and engine.get_active_key(0x53) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end end local function aayawpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") then else if switch then switch = false else switch = true end if switch then if ui.get_int("Yaw Presets:")==0 then end end if switch then switch = false else switch = true end if ui.get_int("Yaw Presets:")==1 then if switch then ui.set_int("Antiaim.yaw_offset",7) else ui.set_int("Antiaim.yaw_offset",-5) end end if switch then switch = false else switch = true end if ui.get_int("Yaw Presets:")==2 then if switch then ui.set_int("Antiaim.yaw_offset",14) else ui.set_int("Antiaim.yaw_offset",-14) end end if switch then switch = false else switch = true end if ui.get_int("Yaw Presets:")==3 then if switch then ui.set_int("Antiaim.yaw_offset",21) else ui.set_int("Antiaim.yaw_offset",-21) end end if switch then switch = false else switch = true end if ui.get_int("Yaw Presets:")==4 then if switch then ui.set_int("Antiaim.yaw_offset", math.random(-34,52)) else ui.set_int("Antiaim.yaw_offset", math.random(-34, 52)) end end end end local function bodyleanpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") then else if ui.get_int("Body Lean Presets:")==0 then end if ui.get_int("Body Lean Presets:")==1 then ui.set_int("0Antiaim.body_lean",math.random(3,9)) ui.set_int("0Antiaim.inverted_body_lean", math.random(3,9)) end if ui.get_int("Body Lean Presets:")==2 then ui.set_int("0Antiaim.body_lean",math.random(11,16)) ui.set_int("0Antiaim.inverted_body_lean", math.random(11,16)) end if ui.get_int("Body Lean Presets:")==3 then ui.set_int("0Antiaim.body_lean",math.random(17,26)) ui.set_int("0Antiaim.inverted_body_lean", math.random(17,26)) end if ui.get_int("Body Lean Presets:")==4 then ui.set_int("0Antiaim.body_lean",math.random(31,46)) ui.set_int("0Antiaim.inverted_body_lean", math.random(31,46)) end end end local function aajitteron() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") then else if ui.get_int("AA Jitter on:")==0 then end if ui.get_int("AA Jitter on:")==1 and engine.get_active_key(0x44) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(17,26)) end if ui.get_int("AA Jitter on:")==1 and engine.get_active_key(0x41) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(17,26)) end if ui.get_int("AA Jitter on:")==1 and engine.get_active_key(0x53) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(17,26)) end if ui.get_int("AA Jitter on:")==1 and engine.get_active_key(0x57) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(17,26)) end if ui.get_int("AA Jitter on:")==2 and not engine.get_active_key(0x20) and not engine.get_active_key(0x57) and not engine.get_active_key(0x41) and not engine.get_active_key(0x53) and not engine.get_active_key(0x44) and not engine.get_active_key(0x10) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(25,38)) end if ui.get_int("AA Jitter on:")==3 and engine.get_active_key(0x20) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(13,24)) end if ui.get_int("AA Jitter on:")==4 and engine.get_active_key(0x10) then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range", math.random(1,7)) end end end local function aadesyncpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") then else if switch then switch = false else switch = true end if switch then if ui.get_int("Desync Presets:")==0 then end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==1 then if switch then ui.set_int("0Antiaim.desync_range",math.random(5,10)) ui.set_int("0Antiaim.inverted_desync_range",math.random(5,10)) else ui.set_int("0Antiaim.desync_range",math.random(5,10)) ui.set_int("0Antiaim.inverted_desync_range",math.random(5,10)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==2 then if switch then ui.set_int("0Antiaim.desync_range",math.random(7,17)) ui.set_int("0Antiaim.inverted_desync_range",math.random(7,17)) else ui.set_int("0Antiaim.desync_range",math.random(7,17)) ui.set_int("0Antiaim.inverted_desync_range",math.random(7,17)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==3 then if switch then ui.set_int("0Antiaim.desync_range",math.random(21,27)) ui.set_int("0Antiaim.inverted_desync_range",math.random(21,27)) else ui.set_int("0Antiaim.desync_range",math.random(21,27)) ui.set_int("0Antiaim.inverted_desync_range",math.random(21,27)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==4 then if switch then ui.set_int("0Antiaim.desync_range",math.random(23,48)) ui.set_int("0Antiaim.inverted_desync_range", math.random(23,48)) else ui.set_int("0Antiaim.desync_range",math.random(23,48)) ui.set_int("0Antiaim.inverted_desync_range", math.random(23,48)) end end end end local function aajitterpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) then else if switch then switch = false else switch = true end if switch then if ui.get_int("AA Jitter Range:")==0 then end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==1 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(5,10)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(5,10)) end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==2 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(10,15)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(10,15)) end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==3 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(25,35)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(25,35)) end end end end local function k() if menu.get_int("Anti-Aim Types:")==1 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.desync",1) menu.set_int("Antiaim.yaw_offset",0) menu.set_int("0Antiaim.inverted_desync_range",60) menu.set_int("0Antiaim.desync_range",60) else if menu.get_int("Anti-Aim Types:")==2 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.desync",1) menu.set_int("Antiaim.yaw_offset",0) menu.set_int("0Antiaim.inverted_desync_range",1) menu.set_int("0Antiaim.desync_range",1) else if menu.get_int("Anti-Aim Types:")==3 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.desync",1) menu.set_int("Antiaim.yaw_offset",0) if d>=1 then d=0 menu.set_int("0Antiaim.inverted_desync_range",60) menu.set_int("0Antiaim.desync_range",60) else d=d+1 menu.set_int("0Antiaim.inverted_desync_range",1) menu.set_int("0Antiaim.desync_range",1) end else if menu.get_int("Anti-Aim Types:")==4 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("Antiaim.desync",0) if e>=1 then menu.set_int("Antiaim.yaw_offset",math.random(-25,-35)) e=0 else menu.set_int("Antiaim.yaw_offset",math.random(25,35)) e=e+1 end else if menu.get_int("Anti-Aim Types:")==5 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.desync",0) menu.set_int("Antiaim.yaw_offset",math.random(40,-40)) else if menu.get_int("Anti-Aim Types:")==6 then menu.set_int("0Antiaim.pitch",1) menu.set_int("0Antiaim.desync",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("Antiaim.fake_lag_type",2) 
    if f>=150 then f=0 menu.set_int("Antiaim.yaw_offset",math.random(40,-40)) menu.set_int("Antiaim.fake_lag_limit",math.random(8,16)) menu.set_int("0Antiaim.inverted.desync_range",math.random(0,40)) menu.set_int("0Antiaim.desync_range",math.random(0,40)) else f=f+1 end else if menu.get_int("Anti-Aim Types:")==7 then menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.pitch",1) menu.set_int("Antiaim.fake_lag_type",2) menu.set_int("0Antiaim.desync",1) if g>=150 then g=0 menu.set_int("Antiaim.fake_lag_limit",math.random(8,16)) menu.set_int("Antiaim.yaw_offset",math.random(40,-40)) menu.set_int("Antiaim.inverted.desync_range",math.random(0,20)) menu.set_int("0Antiaim.desync_range",math.random(0,20)) else g=g+1 end else if menu.get_int("Anti-Aim Types:")==8 then menu.set_int("0Antiaim.pitch",0) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("Antiaim.fake_lag_type",2) menu.set_int("0Antiaim.desync",1) menu.set_int("Antiaim.yaw_offset",-180) if h>=100 then h=0 menu.set_int("0Antiaim.inverted.desync_range",math.random(0,60)) menu.set_int("Antiaim.fake_lag_limit",math.random(8,16)) menu.set_int("0Antiaim.desync_range",math.random(0,60)) else h=h+1 end elseif menu.get_int("Anti-Aim Types:")==9 then menu.set_int("0Antiaim.pitch",1) menu.set_int("0Antiaim.desync",1) menu.set_bool("Antiaim.fake_lag",false) if i>=150 then menu.set_int("Antiaim.yaw_offset",math.random(20,-20)) menu.set_int("0Antiaim.inverted.desync_range",math.random(0,20)) menu.set_int("0Antiaim.desync_range",math.random(0,20)) i=0 else i=i+1 end else if menu.get_int("Anti-Aim Types:")==10 then menu.set_int("0Antiaim.pitch",1) menu.set_bool("Antiaim.fake_lag",true) menu.set_int("0Antiaim.desync",1) menu.set_int("Antiaim.fake_lag_type",2) if i>=150 then menu.set_int("Antiaim.yaw_offset",math.random(20,-20)) menu.set_int("0Antiaim.inverted.desync_range",math.random(0,20)) menu.set_int("0Antiaim.desync_range",math.random(0,20)) menu.set_int("Antiaim.fake_lag_limit",math.random(8,16)) i=0 else i=i+1 end end end end end end end end end end end local function bebra() if engine.get_active_key(0x20) and ui.get_bool("In Air Jitter") then if swtich then swtich = false else swtich = true end if swtich then ui.set_int("Antiaim.fake_lag_limit", 9, false) ui.set_int("0Antiaim.body_lean", math.random(20,90)) ui.set_int("0Antiaim.desync_range", math.random(17, 40)) ui.set_int("0Antiaim.inverted_desync_range", math.random(17, 36)) ui.set_int("0Antiaim.inverted_body_lean", math.random(20,60)) ui.set_int("Antiaim.yaw_offset", -23) else ui.set_int("Antiaim.fake_lag_limit", 16, true) ui.set_int("0Antiaim.desync_range", math.random(19, 34)) ui.set_int("0Antiaim.inverted_desync_range", math.random(17, 36)) ui.set_int("Antiaim.yaw_offset",  28) ui.set_int("0Antiaim.inverted_body_lean", math.random(20,90)) ui.set_int("0Antiaim.body_lean", math.random(20,60)) end end end local function lagsync() if ui.get_bool("Lag Sync") and not engine.get_active_key(0x20) and not engine.get_active_key(0x10) then if swtich then swtich = false else swtich = true end if swtich then ui.set_int("Antiaim.fake_lag_limit", 14, false) ui.set_int("0Antiaim.body_lean", math.random(43,70)) ui.set_int("0Antiaim.desync_range", math.random(28, 43)) ui.set_int("0Antiaim.inverted_desync_range", math.random(28, 43)) ui.set_int("Antiaim.yaw_offset", math.random(-10, -20)) ui.set_int("0Antiaim.inverted_body_lean", math.random(20,90)) else ui.set_int("Antiaim.fake_lag_limit", 16, true) ui.set_int("0Antiaim.body_lean", math.random(43,70)) ui.set_int("0Antiaim.desync_range", math.random(38, 54)) ui.set_int("0Antiaim.inverted_desync_range", math.random(38, 54)) ui.set_int("Antiaim.yaw_offset", math.random(-15, 26)) ui.set_int("0Antiaim.inverted_body_lean", math.random(20,90)) end end end function adaptiveragebot() if ui.get_bool("Adaptive Ragebot") then ui.set_int("0Ragebot.hitchance_amount", math.random (50,62)) ui.set_int("0Ragebot.minimum_visible_damage", math.random (45,55)) ui.set_int("0Ragebot.minimum_override_damage", math.random (5,15)) ui.set_int("0Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("1Ragebot.hitchance_amount", math.random (35,44)) ui.set_int("1Ragebot.minimum_visible_damage", math.random (10,30)) ui.set_int("1Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("1Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("2Ragebot.hitchance_amount", math.random (30,42)) ui.set_int("2Ragebot.minimum_visible_damage", math.random (15,35)) ui.set_int("2Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("2Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("3Ragebot.hitchance_amount", math.random (30,42)) ui.set_int("3Ragebot.minimum_visible_damage", math.random (15,35)) ui.set_int("3Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("3Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("4Ragebot.hitchance_amount", math.random (50,55)) ui.set_int("4Ragebot.minimum_visible_damage", math.random (35,55)) ui.set_int("4Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("4Ragebot.max_misses_amount", math.random (0,2)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("4Ragebot.hitchance_amount", math.random (20,35)) end ui.set_int("5Ragebot.hitchance_amount", math.random (70,83)) ui.set_int("5Ragebot.minimum_visible_damage", math.random (70,82)) ui.set_int("5Ragebot.max_misses_amount", math.random (0,3)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("5Ragebot.hitchance_amount", math.random (10,30)) ui.set_int("5Ragebot.minimum_override_damage", math.random (1,15)) end ui.set_int("6Ragebot.hitchance_amount", math.random (75,85)) ui.set_int("6Ragebot.minimum_visible_damage", math.random (100,103)) ui.set_int("6Ragebot.minimum_override_damage", math.random (10,15)) ui.set_int("6Ragebot.max_misses_amount", math.random (0,1)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("6Ragebot.hitchance_amount", math.random (20,30)) end ui.set_int("7Ragebot.hitchance_amount", math.random (10,15)) ui.set_int("7Ragebot.minimum_visible_damage", math.random (10,35)) ui.set_int("7Ragebot.minimum_override_damage", math.random (10,15)) ui.set_int("7Ragebot.max_misses_amount", math.random (0,3)) end end function pitchzero(cmd) if ui.get_bool("Pitch Zero") == false then return end if entitylist.get_local_player() == nil then return end flag = entitylist.get_local_player():get_prop_int("CBasePlayer","m_fFlags") if flag == 256 or flag == 262 then int = 0 end if flag == 257 or flag == 261 or flag == 263 then int = int + 4 end if int > 45 and int < 250 then ui.set_int("0Antiaim.pitch", 0) else ui.set_int("0Antiaim.pitch", pitchch) end end local function idealtick() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Ideal Tick") then if is_alive == true then if ui.get_keybind_state(keybinds.automatic_peek) then ui.set_bool("Ragebot.slow_teleport", false) ui.set_bool("Antiaim.freestand", true) ui.set_keybind_state(keybinds.safe_points, true) ui.set_keybind_state(keybinds.double_tap,true) else ui.set_bool("Ragebot.slow_teleport", true) ui.set_bool("Antiaim.freestand", false) ui.set_keybind_state(keybinds.safe_points, false) end end end end function PingSpiker() if (ui.get_bool("Ping Spike")) then pingamount = ui.get_int("Ping Amount") console.set_int("net_fakelag", pingamount) end end local print = cheat.notify local menu = ui local client = cheat menu.add_sliderint("JumpScout Hitchance", 10, 100) menu.add_sliderint("JumpRevolver Hitchance", 10, 100) local callbacks = { create_move = { cache = { override = false, }, jump_scout = function(self) local local_player = entitylist.get_local_player() if not local_player then return end local check_air = local_player:get_prop_bool("CBasePlayer", "m_hGroundEntity") -- deff false 
    if check_air then if not self.cache.override then self.cache.value = { default_hitchance = menu.get_int("5Ragebot.hitchance_amount") } menu.set_int("5Ragebot.hitchance_amount", menu.get_int("JumpScout Hitchance")) self.cache.override = true end else if self.cache.override then menu.set_int("5Ragebot.hitchance_amount", self.cache.value.default_hitchance) self.cache.override = false end end end, }, } local callbacks = { create_move = { cache = { override = false, }, jump_revolver = function(self) local local_player = entitylist.get_local_player() if not local_player then return end local check_air = local_player:get_prop_bool("CBasePlayer", "m_hGroundEntity") -- deff false 
    if check_air then if not self.cache.override then self.cache.value = { default_hitchance = menu.get_int("0Ragebot.hitchance_amount") } menu.set_int("0Ragebot.hitchance_amount", menu.get_int("JumpRevolver Hitchance")) self.cache.override = true end else if self.cache.override then menu.set_int("0Ragebot.hitchance_amount", self.cache.value.default_hitchance) self.cache.override = false end end end, }, } local function attargets() if ui.get_bool("At Targets in Air") then if engine.get_active_key(0x20) then ui.set_int("0Antiaim.base_angle", 1 ) else ui.set_int("0Antiaim.base_angle", 0 ) end end end local function fakeflick() if ui.get_bool("Fake Flick") then local inverter = ui.get_keybind_state(keybinds.flip_desync) local tickcount = globalvars.get_tickcount() % 60 if tickcount == 14 or tickcount == 17 then if inverter == true then ui.set_int("Antiaim.yaw_offset", -90) else ui.set_int("Antiaim.yaw_offset", 90) end else ui.set_int("Antiaim.yaw_offset", 0) end end end local function Legbreak() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Leg Breaker") and cmd.get_send_packet() == true then if is_alive == true then if swtich then swtich = false else swtich = true end if swtich then ui.set_int("Misc.leg_movement", 0) else ui.set_int("Misc.leg_movement", 1) end else ui.set_int("Misc.leg_movement", 1) end end end 
    local function invertaaspam() if ui.get_bool("Invert AA Spam") and cmd.get_send_packet() == true then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end end cheat.RegisterCallback("on_createmove", function() switch = not switch lagsync() bebra() k() pitchzero() idealtick() PingSpiker() aayawpresets() aadesyncpresets() attargets() aajitterpresets() aajitteron() bodyleanpresets() fakeflick() Legbreak() invertaaon() invertaaspam() update_choke() callbacks.create_move:jump_revolver() callbacks.create_move:jump_scout() end) local function paint2() local sc = { x = engine.get_screen_width(), y = engine.get_screen_height() } local size = render.get_text_width(font) offset = 10 if ui.get_bool("Viewmodel in scope") then if ui.get_keybind_state( "misc.third_person_key" ) then console.set_int( "fov_cs_debug", 0 ) else console.set_int( "fov_cs_debug", 90 ) end else console.set_int( "fov_cs_debug", 0 ) end if not engine.is_in_game() then return end if entitylist.get_local_player():get_health() == 0 then return end if ui.get_bool("Acatel") then render.text(acafont, sc.x/2+1, sc.y/2 +25, color.new(255, 255, 255, 255), "ACATEL") render.text(acafont, sc.x/2+29, sc.y/2 +25, color.new(118, 118, 118, 255), ".BETA") render.text(acafont, sc.x/2+1, sc.y/2 +33, color.new(142, 138, 181, 255), "FAKE YAW:") if(ui.get_keybind_state(keybinds.flip_desync)) then render.text(acafont, sc.x/2+38, sc.y/2 +23 + offset, color.new(255, 255, 255, 255), "L") offset = offset + 10 else render.text(acafont, sc.x/2+38, sc.y/2 +23 + offset, color.new(255, 255, 255, 255), "R") offset = offset + 10 end if(ui.get_keybind_state(keybinds.double_tap)) then render.text(acafont, sc.x/2 + 1, sc.y/2 +41, color.new(25, 255, 25, 255), "DT") render.text(acafont, sc.x/2+1, sc.y/2 +49, color.new(118, 118, 118, 160), "BAIM") render.text(acafont, sc.x/2+20, sc.y/2 +49, color.new(118, 118, 118, 160), "SP") render.text(acafont, sc.x/2+31, sc.y/2 +49, color.new(118, 118, 118, 160), "FD") end if not (ui.get_keybind_state(keybinds.double_tap)) then render.text(acafont, sc.x/2+1, sc.y/2 +41, color.new(118, 118, 118, 160), "BAIM") render.text(acafont, sc.x/2+20, sc.y/2 +41, color.new(118, 118, 118, 160), "SP") render.text(acafont, sc.x/2+31, sc.y/2 +41, color.new(118, 118, 118, 160), "FD") end if(ui.get_keybind_state(keybinds.hide_shots)) then render.text(acafont, sc.x/2 + 1, sc.y/2 +41, color.new(255, 255, 255, 255), "OSAA") render.text(acafont, sc.x/2+1, sc.y/2 +49, color.new(118, 118, 118, 160), "BAIM") render.text(acafont, sc.x/2+20, sc.y/2 +49, color.new(118, 118, 118, 160), "SP") render.text(acafont, sc.x/2+31, sc.y/2 +49, color.new(118, 118, 118, 160), "FD") end if(ui.get_keybind_state(keybinds.body_aim)) then render.text(acafont, sc.x/2+1, sc.y/2 +41, color.new(142, 138, 181, 255), "BAIM") end if(ui.get_keybind_state(keybinds.safe_points)) then render.text(acafont, sc.x/2+20, sc.y/2 +41, color.new(142, 138, 181, 255), "SP") end end if ui.get_bool("Half-Life") then render.text(halffont, sc.x/2+1, sc.y/2 +25, color.new(255, 255, 255, 255), "HALF-LIFE") render.text(halffont, sc.x/2+38, sc.y/2 +25, color.new(255, 240, 126, 255), "BETA") render.text(halffont, sc.x/2+1, sc.y/2 +33, color.new(161, 139, 169, 255), "BRUTE [1]:[7]") render.text(halffont, sc.x/2 + 1, sc.y/2 + 41, color.new(255, 255, 255, 100), "BAIM") render.text(halffont, sc.x/2 + 22, sc.y/2 + 41, color.new(255, 255, 255, 100), "DT") render.text(halffont, sc.x/2 + 34, sc.y/2 + 41, color.new(255, 255, 255, 100), "OSAA") if(ui.get_keybind_state(keybinds.double_tap)) then render.text(halffont, sc.x/2 + 22, sc.y/2 + 41, color.new(255, 255, 255, 255), "DT") offset = offset + 10 end if(ui.get_keybind_state(keybinds.hide_shots)) then render.text(halffont, sc.x/2 + 34, sc.y/2 + 41, color.new(255, 255, 255, 255), "OSAA") offset = offset + 10 end if(ui.get_keybind_state(keybinds.damage_override)) then render.text(halffont, sc.x/2+1, sc.y/2 +33, color.new(255, 255, 255, 255), "DORMANCY : 0") offset = offset + 10 end if(ui.get_keybind_state(keybinds.body_aim)) then render.text(halffont, sc.x/2 + 1, sc.y/2 + 41, color.new(255, 255, 255, 255), "BAIM") offset = offset + 10 end end end function resolver(shot_info) if ui.get_bool("AntiBrute Resolver") then if shot.info_result == "Miss" then ui.set_int("Ragebot.resolvertypes", (math.random (0 , 1))) end end end events.register_event("player_death", function(e) if ui.get_bool("Divine Killsay") then local attacker = e:get_int("attacker") local attacker_to_player = engine.get_player_for_user_id(attacker) local lp_idx = engine.get_local_player_index() if attacker_to_player == lp_idx then phrases = {"divine.lua 最佳LUA", "get good. get divine.lua", "最佳LUA discord.gg/bscwgjRhXb", "divine.lua - best rawetrip lua"} randomz = math.random(1,4) console.execute_client_cmd("say " .. phrases[randomz]) end end end) local switch = true local function paint() local y = engine.get_screen_height() local x = engine.get_screen_width() local xmen = globalvars.get_menu_pos_x() local ymen = globalvars.get_menu_pos_y() local menu_opened = globalvars.is_open_menu() local fps = globalvars.get_framerate() local rb = math.floor(math.sin(globalvars.get_realtime() * 2) * 127 + 128) local gb =  math.floor(math.sin(globalvars.get_realtime() * 2 + 2) * 127 + 128) local bb = math.floor(math.sin(globalvars.get_realtime() * 2 + 4) * 127 + 128) local rbb = math.floor(math.sin(globalvars.get_realtime() * 3) * 127 + 128) local gbb =  math.floor(math.sin(globalvars.get_realtime() * 3 + 2) * 127 + 128) local bbb = math.floor(math.sin(globalvars.get_realtime() * 3 + 4) * 127 + 128) offset = 10 if ui.get_bool("Divine") then if not engine.is_in_game() then return end if entitylist.get_local_player():get_health() == 0 then return end render.text(acafont1, x/2-9, y/2 +19, color.new(255, 255, 255, 255), "Divine") render.text(acafont, x/2-14, y/2 +30, color.new(142, 138, 181, 255), "DS:") if(ui.get_keybind_state(keybinds.flip_desync)) then render.text(acafont, x/2-1, y/2 +20 + offset, color.new(255, 255, 255, 255), "L") offset = offset + 10 else render.text(acafont, x/2-1, y/2 +20 + offset, color.new(255, 255, 255, 255), "R") offset = offset + 10 end if(ui.get_keybind_state(keybinds.double_tap)) then render.text(acafont, x/2+6, y/2 +30, color.new(255, 255, 255, 255), "DT") render.text(acafont, x/2-10, y/2 +37, color.new(95, 80, 199, 120), "BAIM") render.text(acafont, x/2+12, y/2 +37, color.new(95, 80, 199, 120), "SP") end if engine.get_active_key("0x20") then render.text(acafont, x/2-3, y/2+12, color.new(255, 255, 255, 255), "AIR") end if not (ui.get_keybind_state(keybinds.double_tap)) then render.text(acafont, x/2+6, y/2 +30, color.new(95, 80, 199, 120), "DT") render.text(acafont, x/2-10, y/2 +37, color.new(95, 80, 199, 120), "BAIM") render.text(acafont, x/2+12, y/2 +37, color.new(95, 80, 199, 120), "SP") end if(ui.get_keybind_state(keybinds.hide_shots)) then render.text(acafont, x/2+18, y/2 +30, color.new(255, 255, 255, 255), "OS") render.text(acafont, x/2-10, y/2 +37, color.new(95, 80, 199, 120), "BAIM") render.text(acafont, x/2+12, y/2 +37, color.new(95, 80, 199, 120), "SP") end if not (ui.get_keybind_state(keybinds.hide_shots)) then render.text(acafont, x/2+18, y/2 +30, color.new(95, 80, 199, 120), "OS") render.text(acafont, x/2-10, y/2 +37, color.new(95, 80, 199, 120), "BAIM") render.text(acafont, x/2+12, y/2 +37, color.new(95, 80, 199, 120), "SP") end if(ui.get_keybind_state(keybinds.body_aim)) then render.text(acafont, x/2-10, y/2 +37, color.new(255, 255, 255, 255), "BAIM") end if(ui.get_keybind_state(keybinds.safe_points)) then render.text(acafont, x/2+12, y/2 +37, color.new(255, 255, 255, 255), "SP") end end end local function getvector() if not entitylist.get_local_player():is_alive() then return end local sc = { x = engine.get_screen_width(), y = engine.get_screen_height() } local bestsize = render.get_text_width(font, "Divine.lua°") local dtsize = render.get_text_width(font, "dt") local hidesize = render.get_text_width(font, "hide") local peeksize = render.get_text_width(font, "peek") local dmgsize = render.get_text_width(font, "dmg") local bodysize = render.get_text_width(font, "body") local desyncrange = ui.get_int("0Antiaim.desync_range") local idesyncrange = ui.get_int("0Antiaim.inverted_desync_range") local yawvalue = ui.get_int("Antiaim.yaw_offset") local offset = 10 local color1 = menu.get_color("Divine New color") local r, g, b= color1:r(), color1:g(), color1:b() if ui.get_bool("Divine New") then if (yawvalue >= 0)  then render.text(acafont2, sc.x/2 + 25 - bestsize/2, sc.y/2+10, color.new(255,255,255,255), "°") offset = offset + 5 render.text(acafont1, sc.x/2 - bestsize/2, sc.y/1.95 +10, color.new(255, 255, 255,255), "Divine") render.text(acafont1, sc.x/2 + 34.5 - bestsize/2, sc.y/1.95 +10, color.new(r,g,b), ".lua") end if (yawvalue <= 0)  then render.text(acafont2, sc.x/2 + 25 - bestsize/2, sc.y/2+10, color.new(255,255,255,255), "°") offset = offset + 5 render.text(acafont1, sc.x/2 + 34.5 - bestsize/2, sc.y/1.95 +10, color.new(255, 255, 255,255), ".lua") render.text(acafont1, sc.x/2 - bestsize/2, sc.y/1.95 +10, color.new(r,g,b), "Divine") end if ui.get_keybind_state(keybinds.double_tap) then render.text(acafont, sc.x/2+5 - hidesize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "DT")  offset = offset + 10 end if ui.get_keybind_state(keybinds.hide_shots) then render.text(acafont, sc.x/2+5 - hidesize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "OS")  offset = offset + 10 end if ui.get_keybind_state(keybinds.automatic_peek) then render.text(acafont, sc.x/2+2 - peeksize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "PEEK") offset = offset + 10 end if ui.get_keybind_state(keybinds.damage_override) then render.text(acafont, sc.x/2-11 - dmgsize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "DORMANCY") offset = offset + 10 
    end if ui.get_keybind_state(keybinds.body_aim) then render.text(acafont, sc.x/2 - bodysize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "BAIM")  offset = offset + 10 end if engine.get_active_key(0x20) then render.text(acafont, sc.x/2+5 - hidesize/2, sc.y/2 + 20 + offset, color.new(255,255,255,255), "AIR")  offset = offset + 10 end if(ui.get_keybind_state(keybinds.flip_desync)) then render.text(acafont2, sc.x/2 + 20 - bestsize/2, sc.y/2+10, color.new(255,255,255,255), idesyncrange) offset = offset + 5 render.gradient(sc.x/2, sc.y/2 + 22, idesyncrange, 1, color.new(255, 255, 255, 255), color.new(0, 0, 0, 0)) render.gradient(sc.x/2 - idesyncrange, sc.y/2 + 22, idesyncrange, 1, color.new(0, 0, 0, 0), color.new(255, 255, 255, 255)) else render.text(acafont2, sc.x/2 + 20 - bestsize/2, sc.y/2+10, color.new(255,255,255,255), desyncrange) offset = offset + 5 render.gradient(sc.x/2, sc.y/2 + 22, desyncrange, 1, color.new(255, 255, 255, 255), color.new(0, 0, 0, 0)) render.gradient(sc.x/2 - desyncrange, sc.y/2 + 22, desyncrange, 1, color.new(0, 0, 0, 0), color.new(255, 255, 255, 255)) end end end local function fakelag() if ui.get_int("Fake Lag Randomizer")==0 then end if ui.get_int("Fake Lag Randomizer")==1 then ui.set_int("Antiaim.fake_lag_limit", math.random (5,16)) end if ui.get_int("Fake Lag Randomizer")==2 then ui.set_int("Antiaim.fake_lag_limit", math.random (10,16)) end if ui.get_int("Fake Lag Randomizer")==3 then if swtich then swtich = false else swtich = true end if switch then ui.set_int("Antiaim.fake_lag_limit",8) else ui.set_int("Antiaim.fake_lag_limit",16) end end if ui.get_int("Fake Lag Randomizer")==4 then if swtich then swtich = false else swtich = true end if switch then ui.set_int("Antiaim.fake_lag_limit",10) else ui.set_int("Antiaim.fake_lag_limit",16) end end end local function lowdrange() local ibl ui.get_int("0Antiaim.inverted_body_lean") local bl ui.get_int("0Antiaim.body_lean") local ds ui.get_int("0Antiaim.desync_range") local ids ui.get_int("0Antiaim.inverted_desync_range") local aay ui.get_int("Antiaim.yaw_offset") if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) then ui.set_int("0Antiaim.desync_range",math.random(4,9)) ui.set_int("0Antiaim.inverted_desync_range", math.random(4,9)) ui.set_int("Antiaim.yaw_offset", math.random(-3,3)) ui.set_int("0Antiaim.inverted_body_lean",math.random(3,7)) ui.set_int("0Antiaim.body_lean",math.random(3,7)) else end end local strings_value = 14 local labels = { "D", "Di", "Divi", "Divin", "Divine", "Divine.l", "Divine.lu", "Divine.lua", "Divine.lu", "Divine.l", "Divine", "Divin", "Divi", "Div", "Di", "D" } local first = 0 local second = 0 local function Clantag() if ui.get_bool("Divine Clantag") then if first < globalvars.get_tickcount() then second = second + 1 if second > strings_value then second = 0 end engine.set_clantag(labels[second]) first = globalvars.get_tickcount() + 20 end end end events.register_event("weapon_fire", function(e) if ui.get_bool("Desync on Shot") then if switch then switch = false else switch = true end if switch then ui.set_int("0Antiaim.body_lean", 100) ui.set_int("0Antiaim.inverted_body_lean", 100) ui.set_int("0Antiaim.desync_range",60) ui.set_int("0Antiaim.inverted_desync_range",60) ui.set_int("Antiaim.yaw_offset"-20) else end end end) local watermarkfont = render.setup_font("Verdana", 12, 500, true, true, false) local x_wat = 0 local  clor = ui.get_color("color filled") local screen_w = engine.get_screen_width() local screen_h = engine.get_screen_height() local userdata = engine.get_gamename() local datetime = globalvars.get_time() local serverip = globalvars.get_server_address() local sundwat = render.get_text_width(watermarkfont, "divine | " .. userdata .. " | " .. globalvars.get_ping() .. "ms" .. " |  " .. datetime.. " | ".. "IP:".. serverip) local function watermark() if not ui.get_bool("Divine Watermark") then return end if ui.get_bool("Divine Watermark") then local clor = ui.get_color("color filled") render.rect_filled(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 17, color.new(0,0,0,120)) render.rect_filled(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 2, clor) render.gradient(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 2, clor, clor) render.text(watermarkfont, screen_w - sundwat - 10 + 2 + x_wat, 13, color.new(255,255,255,255), "divine | " .. userdata .. " | " .. globalvars.get_ping() .. "ms" .. " |  " .. datetime.. " | ".. "IP:".. serverip) end end local function skitinds() if ui.get_bool("Skeet Indicators") then if not engine.is_in_game() then return end if entitylist.get_local_player():get_health() == 0 then return end local local_player = entitylist.get_local_player() if not local_player then return end local weapon = weapon.get_name(entitylist.get_weapon_by_player(local_player)) local alpha = math.floor(math.sin(globalvars.get_realtime() * 5) * 29 + 31  ) local alpha1 = math.floor(math.sin(globalvars.get_realtime() * 5) * 40 + 51  ) local alpha3 = math.floor(math.sin(globalvars.get_realtime() * 5) * 40 + 40  ) local y = engine.get_screen_height() local x = engine.get_screen_width() local Fakelag = ui.get_int("Antiaim.fake_lag_limit") local Desyncc = ui.get_int("0Antiaim.desync_range") local pings = ui.get_int("Ping Amount") local wpn_tab = { ['DEAGLE'] = 0, ['REVOLVER'] = 0, ['P2000'] = 1, ['GLOCK 18'] = 1, ['CZ75-AUTO'] = 1, ['P250'] = 1, ['DUAL BERETTAS'] = 1, ['USP-S'] = 1, ['FIVE-SEVEN'] = 1, ['TEC-9'] = 1, ['MAC-10'] = 2, ['UMP-45'] = 2, ['MP7'] = 2, ['MP9'] = 2, ['P90'] = 2, ['PP-BIZON'] = 2, ['AK-47'] = 3, ['M4A4'] = 3, ['M4A1-S'] = 3, ['SG 553'] = 3, ['AUG'] = 3, ['GALIL AR'] = 3, ['FAMAS'] = 3, ['SCAR-20'] = 4, ['G3SG1'] = 4, ['SSG 08'] = 5, ['AWP'] = 6, ['NOVA'] = 7, ['XM1014'] = 7, ['SAWED-OFF'] = 7, ['MAG-7'] = 7, ['M249'] = 7, ['NEGEV'] = 7, } local offset = 15 local current = wpn_tab[weapon] or nil if(ui.get_keybind_state(keybinds.double_tap)) then render.gradient(x - x + 20, y/2 + 15 + offset, 25, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 15 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 11 + offset, color.new(230, 225, 225), "DT") offset = offset + 15 end if(ui.get_keybind_state(keybinds.fakeduck)) then render.gradient(x - x + 20, y/2 + 35 + offset, 50, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(255,255,255), "DUCK") offset = offset + 35 end if engine.get_active_key(0x20) and ui.get_keybind_state(keybinds.double_tap) then render.gradient(x - x + 20, y/2 + 35 + offset, 20, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(220,alpha3,0), "LC") offset = offset + 35 elseif engine.get_active_key(0x20) and not ui.get_keybind_state(keybinds.double_tap) then render.gradient(x - x + 20, y/2 + 35 + offset, 20, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(102, 176, 41 , 255), "LC") offset = offset + 35 end if ui.get_bool("Ping Spike") then render.gradient(x - x + 20, y/2 + 35 + offset, 80, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(200,alpha1,0), "PING: " .. pings) offset = offset + 35 end if ui.get_bool("Resolver") then render.gradient(x - x + 20, y/2 + 35 + offset, 20, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(102, 176, 41 , 255), "DA") offset = offset + 35 end if current ~= nil then if not weapon then return end local hcance = ui.get_int(string.format('%sRagebot.%s', current, 'hitchance_amount')) render.gradient(x - x + 20, y/2 + 35 + offset, 40, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(187, 177, 239), "HC: " .. tostring(hcance)) offset = offset + 35 end if current ~= nil then if not weapon then return end local damage = ui.get_int(string.format('%sRagebot.%s', current, ui.get_keybind_state(keybinds.damage_override) and 'minimum_override_damage' or 'minimum_visible_damage')) render.gradient(x - x + 20, y/2 + 35 + offset, 90, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(255, 255, 255 , 255), "Damage: " .. tostring(damage)) offset = offset + 35 end if(ui.get_keybind_state(keybinds.hide_shots)) then render.gradient(x - x + 20, y/2 + 35 + offset, 90, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(102, 176, 41 , 255), "ONSHOT") offset = offset + 35 end if ui.get_bool("Antiaim.freestand") then render.gradient(x - x + 20, y/2 + 35 + offset, 20, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(102, 176, 41 , 255), "FS") offset = offset + 35 end if(ui.get_keybind_state(keybinds.safe_points)) then render.gradient(x - x + 20, y/2 + 35 + offset, 50, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) 
        render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) 
        render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(102, 176, 41 , 255), "SAFE") offset = offset + 35 end if(ui.get_keybind_state(keybinds.body_aim)) then render.gradient(x - x + 20, y/2 + 35 + offset, 50, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(205, 16, 4 , 255), "BAIM") offset = offset + 35 end if ui.get_int("Fake Lag Randomizer", 1) then render.gradient(x - x + 20, y/2 + 35 + offset, 40, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(139, 143, 233 , 255), "FL") render.arc(x/2 - 915, y/2 + 45 + offset, 6, 9, -80,600, color.new(0, 0, 0,120)) render.arc(x/2 - 915, y/2 + 45 + offset, 6, 9, -80,Fakelag*23, color.new(139, 143, 233 , 255)) offset = offset + 35 end if ui.get_int("Desync Presets:") then render.gradient(x - x + 20, y/2 + 35 + offset, 50, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(189, 62, 7 , 255), "FAKE") render.arc(x/2 - 890, y/2 + 45 + offset, 6, 9, -80,600, color.new(47, 47, 47,150)) render.arc(x/2 - 890, y/2 + 45 + offset, 6, 9, -80,Desyncc*23, color.new(189, 62, 7 , 200)) offset = offset + 35 end if ui.get_bool("Antiaim.fake_lag") then render.gradient(x - x + 20, y/2 + 35 + offset, 110, 22, color.new(0,0,0, 200), color.new(0,0,0,0)) render.gradient(x - x , y/2 + 35 + offset, 20, 22, color.new(0,0,0, 0), color.new(0,0,0, 200)) render.text(Skeet, x/2 - 953, y/2 + 30 + offset, color.new(255,255,255), string.format("%i-%i-%i-%i-%i",choke_d[6], choke_d[5], choke_d[4], choke_d[3], choke_d[2])) offset = offset + 35 end end end function update_choke() if cmd.get_choked_commands() < choke_d[1] then choke_d[2] = choke_d[3] choke_d[3] = choke_d[4] choke_d[4] = choke_d[5] choke_d[5] = choke_d[6] choke_d[6] = choke_d[1] end choke_d[1] = cmd.get_choked_commands() end; update_choke() local function keybi() if ui.get_bool("Enable keybinds") then local x = ui.get_int("x") local y = ui.get_int("y") local offsett = 15 local clor = ui.get_color("Color") local hsmode = ui.get_keybind_mode(keybinds.hide_shots) local dtmode = ui.get_keybind_mode(keybinds.double_tap) local apmode = ui.get_keybind_mode(keybinds.automatic_peek) local spmode = ui.get_keybind_mode(keybinds.safe_points) local aamode = ui.get_keybind_mode(keybinds.flip_desync) local baimode = ui.get_keybind_mode(keybinds.body_aim) local swmode = ui.get_keybind_mode(keybinds.slowwalk) local fdmode = ui.get_keybind_mode(keybinds.fakeduck) local ejmode = ui.get_keybind_mode(keybinds.edge_jump) local dmgmode = ui.get_keybind_mode(keybinds.damage_override) if ui.get_bool("Enable keybinds") then render.rect_filled(x, y, 120, 2, clor) end render.rect_filled(x, y + 2, 120, 15, color.new(0,0,0, 180)) render.text(keybindss, x + 40 , y + 3, color.new(255,255,255), "[divine]") if (ui.get_keybind_state(keybinds.double_tap)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "double tap") render.text(keybindss, x + 110 - 5 - 5 - 2,y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.hide_shots)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "hide shots") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.flip_desync)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "Invert AA") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.body_aim)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "body aim") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.slowwalk)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "slow walk") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.fakeduck)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "fake duck") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.edge_jump)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "edge jump") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.automatic_peek)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "auto peek") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.damage_override)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "damage override") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.safe_points)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "safe points") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end end end local function abf(shot_info) if not engine.is_in_game() then return end if not entitylist.get_local_player():is_alive() then return end local abf = { switch = ui.get_keybind_state(keybinds.flip_desync) } if ui.get_bool("AntiBrute Force") and ui.get_int("AntiBrute Force:")==0 then if abf.switch then ui.set_keybind_state(keybinds.flip_desync, false) end if not abf.switch then ui.set_keybind_state(keybinds.flip_desync, true) end end end local function shot(shot_info) if shot_info.result == "Hit" then hits = hits + 1 elseif shot_info.result == "Spread" then misses_spread = misses_spread + 1 end end cheat.RegisterCallback("on_paint", function() switch = not switch paint() paint2() getvector() adaptiveragebot() fakelag() lowdrange() Clantag() watermark() skitinds() keybi() end) cheat.RegisterCallback("on_shot", function() switch = not switch   resolver() abf() shot() end)
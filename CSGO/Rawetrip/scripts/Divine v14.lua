local print = cheat.notify local menu = ui local randomz local pitchch = ui.get_int("0Antiaim.pitch") local int = 0 local A=0 local keybindss = render.setup_font("Verdana", 12) local default = render.setup_font("Verdana", 14) local defaultsmall = render.setup_font("Verdana", 13) cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") cheat.notify("open console!") console.execute_client_cmd("clear") console.print_color("|**************************************************************************************|\n", color.new(122, 195, 250)) console.print_color("|coder's discords: guccish#2018 Cyanide#7344                                           |\n", color.new(122, 195, 250)) console.print_color("|Divine.lua Discord Server https://discord.gg/UdzKjv4Re7                               |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|Divine v14                                                                            |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|Hello, about changelogs!                                                              |\n", color.new(122, 195, 250)) console.print_color("|                                                                                      |\n", color.new(122, 195, 250)) console.print_color("|-Invert on Air Fixed                                                                  |\n", color.new(122, 195, 250)) console.print_color("|-Fixed Low Desync Range on DT (Changed Desync + Yaw)                                  |\n", color.new(122, 195, 250)) console.print_color("|-Fixed Yaw Presets + Added New Features                                               |\n", color.new(122, 195, 250)) console.print_color("|-Added Low AntiAim Range on dt                                                        |\n", color.new(122, 195, 250)) console.print_color("|-Completely Removed Anti-Aim Types: presets + Added New Desync Presets                |\n", color.new(122, 195, 250)) console.print_color("|-Removed Lagsync Cuz new AA Presets More OP                                           |\n", color.new(122, 195, 250)) console.print_color("|-Added Slowwalk Speed Modifier                                                        |\n", color.new(122, 195, 250)) console.print_color("|-Removed AA Jitter on Because Broken + Useless (use invert aa on)                     |\n", color.new(122, 195, 250)) console.print_color("|-Added Lagsync Options on AA Presets                                                  |\n", color.new(122, 195, 250)) console.print_color("|-Fixed Some Optimizations Problems                                                    |\n", color.new(122, 195, 250)) console.print_color("|-Fixed Some Crash Problems                                                            |\n", color.new(122, 195, 250)) console.print_color("|**************************************************************************************|\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) console.print_color("\n", color.new(122, 195, 250)) cheat.notify("Divine.lua loaded, have fun!") ui.add_sliderint("https://discord.gg/2PThRWBwuF for getting lua earlier!!") ui.add_sliderint("Rage Settings") ui.add_checkbox("Adaptive Ragebot") ui.add_checkbox("Ideal Tick") ui.add_checkbox("Resolver") ui.add_checkbox("Desync on Shot") ui.add_sliderint("Anti-Aim Settings") ui.add_combobox("Desync Presets:",{"None","Adaptive","Low Range","High Range","Jitter"}) ui.add_combobox("AA Presets",{'None', 'False LagSync','Anti OT','Lag Breaker'}) ui.add_combobox("Yaw Presets:",{"None","Adaptive","Low Range","High Range","High Random"}) ui.add_combobox("AA Jitter Range:",{"None","Low Range","Mid Range","High Range"}) ui.add_combobox("Body Lean Presets:",{"None","Adaptive","Low Range","High Range","Jitter"}) ui.add_combobox("Fake Lag Randomizer",{"None","Random 5-16","Random 10-16","Switch 8-16","Switch 10-16"}) ui.add_checkbox("AntiBrute Force") ui.add_combobox("AntiBrute Force:",{"On Shot"}) ui.add_checkbox("Fake Flick") ui.add_checkbox("Low desync range on dt") ui.add_checkbox("Pitch Zero") ui.add_checkbox("Invert on Air") ui.add_checkbox("Invert on Move") ui.add_checkbox("At Targets in Air") ui.add_checkbox("Slowwalk Speed Modifier") ui.add_sliderint("Slowwalk Speed", 0, 155) ui.add_checkbox("Leg Breaker") ui.add_sliderint("Visuals") ui.add_checkbox("Enable keybinds") ui.add_colorpicker("Color") ui.add_sliderint("x", 0, engine.get_screen_width() - 110) ui.add_sliderint("y", 0, engine.get_screen_height() - 19) ui.add_sliderint("Indicators Type") ui.add_checkbox("Skeet Indicators") ui.add_checkbox("Divine New") ui.add_colorpicker("Divine New color") ui.add_checkbox("Viewmodel in scope") ui.add_sliderint("Miscellaneous") ui.add_checkbox("Divine Clantag") ui.add_checkbox("Divine Killsay") ui.add_checkbox("Divine Watermark") ui.add_colorpicker("color filled") local d=0;local e=0;local f=0;local g=0;local h=0;local i=0;local j=0; local switch = false local function invertaaon() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Invert on Air") and cmd.get_send_packet() and engine.get_active_key(0x20) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_bool("Invert on Move") and cmd.get_send_packet() and engine.get_active_key(0x44) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_bool("Invert on Move") and cmd.get_send_packet() and engine.get_active_key(0x41) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_bool("Invert on Move") and cmd.get_send_packet() and engine.get_active_key(0x57) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end if ui.get_bool("Invert on Move") and cmd.get_send_packet() and engine.get_active_key(0x53) then if switch then switch = false else switch = true end if switch then ui.set_keybind_state(keybinds.flip_desync, true) else ui.set_keybind_state(keybinds.flip_desync, false) end end end local function slowwalk() local speed = ui.get_int("Slowwalk Speed") if ui.get_bool("Slowwalk Speed Modifier") then if ui.get_keybind_state(keybinds.slowwalk) then console.set_int("cl_forwardspeed", ui.get_int("Slowwalk Speed")) console.set_int("cl_backspeed", ui.get_int("Slowwalk Speed")) console.set_int("cl_sidespeed", ui.get_int("Slowwalk Speed")) else console.set_int("cl_forwardspeed", 450) console.set_int("cl_backspeed", 450) console.set_int("cl_sidespeed", 450) end else console.set_int("cl_forwardspeed", 450) console.set_int("cl_backspeed", 450) console.set_int("cl_sidespeed", 450) end end local function aadesyncpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") and cmd.get_send_packet() == true then else if switch then switch = false else switch = true end if switch then if ui.get_int("Desync Presets:")==0 then end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==1 then if switch then ui.set_int("0Antiaim.desync_range",math.random(5,10)) ui.set_int("0Antiaim.inverted_desync_range",math.random(5,10)) else ui.set_int("0Antiaim.desync_range",math.random(5,10)) ui.set_int("0Antiaim.inverted_desync_range",math.random(5,10)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==2 then if switch then ui.set_int("0Antiaim.desync_range",math.random(7,17)) ui.set_int("0Antiaim.inverted_desync_range",math.random(7,17)) else ui.set_int("0Antiaim.desync_range",math.random(7,17)) ui.set_int("0Antiaim.inverted_desync_range",math.random(7,17)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==3 then if switch then ui.set_int("0Antiaim.desync_range",math.random(21,27)) ui.set_int("0Antiaim.inverted_desync_range",math.random(21,27)) else ui.set_int("0Antiaim.desync_range",math.random(21,27)) ui.set_int("0Antiaim.inverted_desync_range",math.random(21,27)) end end if switch then switch = false else switch = true end if ui.get_int("Desync Presets:")==4 then if switch then ui.set_int("0Antiaim.desync_range",math.random(23,48)) ui.set_int("0Antiaim.inverted_desync_range", math.random(23,48)) else ui.set_int("0Antiaim.desync_range",math.random(23,48)) ui.set_int("0Antiaim.inverted_desync_range", math.random(23,48)) end end end end local function lagsynctype() local print = cheat.notify local menu = ui local client = cheat local lagsync_type = menu.get_int('AA Presets') if lagsync_type == 0 then return end if lagsync_type == 2 then for i = 0, 3 do if globalvars.get_tickcount() % 3 < 1 then menu.set_int(string.format('%sAntiaim.body_lean', i), 10) menu.set_int(string.format('%sAntiaim.inverted_body_lean', i), 10) menu.set_int("0Antiaim.desync_range",math.random(0-54)) 
else menu.set_int(string.format('%sAntiaim.body_lean', i), 25) menu.set_int(string.format('%sAntiaim.inverted_body_lean', i), 25) menu.set_int("0Antiaim.desync_range",math.random(20,56)) end end menu.set_int('0Antiaim.desync', math.random(0, 2)) elseif lagsync_type == 1 then for i = 0, 3 do menu.set_int(string.format('%sAntiaim.range', i), math.random(10, 20)) menu.set_int(string.format('%sAntiaim.yaw', i), math.random(1, 2)) menu.set_int("0Antiaim.desync_range",math.random(22,42)) end menu.set_int('0Antiaim.desync', 2) elseif lagsync_type == 3 then for i = 0, 3 do menu.set_int(string.format('%sAntiaim.range', i), math.random(0, 30)) menu.set_int(string.format('%sAntiaim.yaw', i), math.random(1, 2)) menu.set_int("0Antiaim.desync_range",math.random(18,32)) end if globalvars.get_tickcount() % 3 < 1 then menu.set_int('Antiaim.fake_lag_limit', 5) else menu.set_int('Antiaim.fake_lag_limit', 15) end menu.set_int('Antiaim.fake_lag_type', math.random(0, 1)) menu.set_int('0Antiaim.desync', math.random(1, 2)) end end local function fakelag() if ui.get_int("Fake Lag Randomizer")==0 then end if ui.get_int("Fake Lag Randomizer")==1 then ui.set_int("Antiaim.fake_lag_limit", math.random (5,16)) end if ui.get_int("Fake Lag Randomizer")==2 then ui.set_int("Antiaim.fake_lag_limit", math.random (10,16)) end if ui.get_int("Fake Lag Randomizer")==3 then if swtich then swtich = false else swtich = true end if switch then ui.set_int("Antiaim.fake_lag_limit",8) else ui.set_int("Antiaim.fake_lag_limit",16) end end if ui.get_int("Fake Lag Randomizer")==4 then if swtich then swtich = false else swtich = true end if switch then ui.set_int("Antiaim.fake_lag_limit",10) else ui.set_int("Antiaim.fake_lag_limit",16) end end end local function aayawpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") and cmd.get_send_packet() == true then else if ui.get_int("Yaw Presets:")==0 then end if ui.get_int("Yaw Presets:")==1 then ui.set_int("Antiaim.yaw_offset", math.random(-8,12)) end if ui.get_int("Yaw Presets:")==2 then ui.set_int("Antiaim.yaw_offset", math.random(0,10)) end if ui.get_int("Yaw Presets:")==3 then ui.set_int("Antiaim.yaw_offset",math.random(-21,21)) end if ui.get_int("Yaw Presets:")==4 then ui.set_int("Antiaim.yaw_offset", math.random(-30,35)) end end end local function bodyleanpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and ui.get_bool("Desync on Shot") and events.register_event("weapon_fire") and cmd.get_send_packet() == true then else if ui.get_int("Body Lean Presets:")==0 then end if ui.get_int("Body Lean Presets:")==1 then ui.set_int("0Antiaim.body_lean",math.random(3,9)) ui.set_int("0Antiaim.inverted_body_lean", math.random(3,9)) end if ui.get_int("Body Lean Presets:")==2 then ui.set_int("0Antiaim.body_lean",math.random(11,16)) ui.set_int("0Antiaim.inverted_body_lean", math.random(11,16)) end if ui.get_int("Body Lean Presets:")==3 then ui.set_int("0Antiaim.body_lean",math.random(17,26)) ui.set_int("0Antiaim.inverted_body_lean", math.random(17,26)) end if ui.get_int("Body Lean Presets:")==4 then ui.set_int("0Antiaim.body_lean",math.random(31,46)) ui.set_int("0Antiaim.inverted_body_lean", math.random(31,46)) end end end local function aajitterpresets() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) and cmd.get_send_packet() == true then else if switch then switch = false else switch = true end if switch then if ui.get_int("AA Jitter Range:")==0 then end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==1 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(5,10)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(5,10)) end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==2 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(10,15)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(10,15)) end end if switch then switch = false else switch = true end if ui.get_int("AA Jitter Range:")==3 then if switch then ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(25,35)) else ui.set_int("0Antiaim.yaw",1) ui.set_int("0Antiaim.range",math.random(25,35)) end end end end function adaptiveragebot() if ui.get_bool("Adaptive Ragebot") then ui.set_int("0Ragebot.hitchance_amount", math.random (50,62)) ui.set_int("0Ragebot.minimum_visible_damage", math.random (45,55)) ui.set_int("0Ragebot.minimum_override_damage", math.random (5,15)) ui.set_int("0Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("1Ragebot.hitchance_amount", math.random (35,44)) ui.set_int("1Ragebot.minimum_visible_damage", math.random (10,30)) ui.set_int("1Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("1Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("2Ragebot.hitchance_amount", math.random (30,42)) ui.set_int("2Ragebot.minimum_visible_damage", math.random (15,35)) ui.set_int("2Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("2Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("3Ragebot.hitchance_amount", math.random (30,42)) ui.set_int("3Ragebot.minimum_visible_damage", math.random (15,35)) ui.set_int("3Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("3Ragebot.max_misses_amount", math.random (0,3)) ui.set_int("4Ragebot.hitchance_amount", math.random (50,55)) ui.set_int("4Ragebot.minimum_visible_damage", math.random (35,55)) ui.set_int("4Ragebot.minimum_override_damage", math.random (1,5)) ui.set_int("4Ragebot.max_misses_amount", math.random (0,2)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("4Ragebot.hitchance_amount", math.random (20,35)) end ui.set_int("5Ragebot.hitchance_amount", math.random (70,83)) ui.set_int("5Ragebot.minimum_visible_damage", math.random (70,82)) ui.set_int("5Ragebot.max_misses_amount", math.random (0,3)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("5Ragebot.hitchance_amount", math.random (10,30)) ui.set_int("5Ragebot.minimum_override_damage", math.random (1,15)) end ui.set_int("6Ragebot.hitchance_amount", math.random (75,85)) ui.set_int("6Ragebot.minimum_visible_damage", math.random (100,103)) ui.set_int("6Ragebot.minimum_override_damage", math.random (10,15)) ui.set_int("6Ragebot.max_misses_amount", math.random (0,1)) if (ui.get_keybind_state(keybinds.damage_override)) then ui.set_int("6Ragebot.hitchance_amount", math.random (20,30)) end ui.set_int("7Ragebot.hitchance_amount", math.random (10,15)) ui.set_int("7Ragebot.minimum_visible_damage", math.random (10,35)) ui.set_int("7Ragebot.minimum_override_damage", math.random (10,15)) ui.set_int("7Ragebot.max_misses_amount", math.random (0,3)) end end function pitchzero(cmd) if ui.get_bool("Pitch Zero") == false then return end if entitylist.get_local_player() == nil then return end flag = entitylist.get_local_player():get_prop_int("CBasePlayer","m_fFlags") if flag == 256 or flag == 262 then int = 0 end if flag == 257 or flag == 261 or flag == 263 then int = int + 4 end if int > 45 and int < 250 then ui.set_int("0Antiaim.pitch", 0) else ui.set_int("0Antiaim.pitch", pitchch) end end local function idealtick() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Ideal Tick") then if is_alive == true then if ui.get_keybind_state(keybinds.automatic_peek) then ui.set_bool("Ragebot.slow_teleport", false) ui.set_bool("Antiaim.freestand", true) else ui.set_bool("Ragebot.slow_teleport", true) ui.set_bool("Antiaim.freestand", false) end end end end local fonts = {calibri = render.setup_font("calibrib", 24)} math.round = function(num, numDecimalPlaces)local mult = 10 ^ (numDecimalPlaces or 0);return math.floor(num * mult + 0.5) / mult;end local visual_controller = {} visual_controller.offset = 0 visual_controller.choke = {0, 0, 0, 0, 0, 0} visual_controller.create_indicator = function(string, color) local size = render.get_text_width(fonts.calibri, string) local screen = {x = engine.get_screen_width(), y = engine.get_screen_height()} render.gradient(11, screen.y - 340 - 37 * visual_controller.offset - 6, math.floor(size / 2), 33, color.new(0, 0, 0, 5), color.new(0, 0, 0, 80)) render.gradient(11 + math.floor(size / 2), screen.y - 340 - 37 * visual_controller.offset - 6, math.floor(size / 2), 33, color.new(0, 0, 0, 80), color.new(0, 0, 0, 5)) render.text(fonts.calibri, 16, screen.y - 344 - 37 * visual_controller.offset + 3, color, string, true) visual_controller.offset = visual_controller.offset + 1 return (screen.y - 340 - 37 * (visual_controller.offset - 1)) end visual_controller.indicators = function() local player = entitylist.get_local_player() if player == nil then return end if not player:is_alive() then return end if ui.get_bool("Skeet Indicators") then visual_controller.offset = 0 local body_yaw = antiaim.get_body_yaw(ui.get_keybind_state(keybinds.flip_desync)) local body_yaw_aa = math.max(-60, math.min(60, math.round(body_yaw, 1))) local in_air = player:get_prop_int("CBasePlayer", "m_fFlags") & (1 << 0) == 0 local r, g, b = 192 - (math.abs(body_yaw) / 60 * 71), 32 + (math.abs(body_yaw) / 60 * 146), 28 local fake = visual_controller.create_indicator("FAKE", color.new(r, g, b, 255)) render.arc(80, fake + 12, 6, 10, -90, 360, color.new(33, 33, 33, 255)) render.arc(80, fake + 12, 6, 10, -90, math.abs(body_yaw_aa) / 58 * 360, color.new(r, g, b, 255)) local fl = visual_controller.create_indicator("FL", color.new(120, 121, 241, 255)) 
    render.arc(53, fl + 12, 6, 10, -90, 360, color.new(33, 33, 33, 255)) render.arc(53, fl + 12, 6, 10, -90, visual_controller.choke[1] / 17 * 360, color.new(120, 121, 241, 255)) visual_controller.create_indicator(string.format("%s-%s-%s-%s-%s", visual_controller.choke[6], visual_controller.choke[5], visual_controller.choke[4], visual_controller.choke[3], visual_controller.choke[2]), color.new(255, 255, 255, 255)) if(ui.get_keybind_state(keybinds.body_aim)) then visual_controller.create_indicator("BAIM", color.new(205, 16, 4 , 255)) end if(ui.get_keybind_state(keybinds.safe_points)) then visual_controller.create_indicator("SAFE", color.new(102, 176, 41 , 255)) end if ui.get_bool("Resolver") then visual_controller.create_indicator("DA", color.new(102, 176, 41 , 255)) end if ui.get_bool("Antiaim.freestand") then visual_controller.create_indicator("FS", color.new(102, 176, 41 , 255)) end if in_air and not ui.get_keybind_state(keybinds.double_tap) then visual_controller.create_indicator("LC", in_air and color.new(132, 195, 16, 255)) end if in_air and ui.get_keybind_state(keybinds.double_tap) then visual_controller.create_indicator("LC", in_air and color.new(255, 0, 0, 255)) end if ui.get_keybind_state(keybinds.fakeduck) then visual_controller.create_indicator("DUCK", color.new(210, 210, 210, 255)) end if ui.get_keybind_state(keybinds.double_tap) and globalvars.get_dt_recharging() then visual_controller.create_indicator("DT", color.new(255, 0, 0, 255)) elseif ui.get_keybind_state(keybinds.double_tap) and not globalvars.get_dt_recharging() then visual_controller.create_indicator("DT", color.new(210, 210, 210, 255)) end if ui.get_keybind_state(keybinds.hide_shots) then visual_controller.create_indicator("ONSHOT", color.new(132, 195, 16, 255)) end end end visual_controller.update_choke = function() if cmd.get_choked_commands() < visual_controller.choke[1] then visual_controller.choke[2] = visual_controller.choke[3] visual_controller.choke[3] = visual_controller.choke[4] visual_controller.choke[4] = visual_controller.choke[5] visual_controller.choke[5] = visual_controller.choke[6] visual_controller.choke[6] = visual_controller.choke[1] end visual_controller.choke[1] = cmd.get_choked_commands() end local function attargets() if ui.get_bool("At Targets in Air") then if engine.get_active_key(0x20) then ui.set_int("0Antiaim.base_angle", 1 ) else ui.set_int("0Antiaim.base_angle", 0 ) end end end local function fakeflick() if ui.get_bool("Fake Flick") then local inverter = ui.get_keybind_state(keybinds.flip_desync) local tickcount = globalvars.get_tickcount() % 60 if tickcount == 14 or tickcount == 17 then if inverter == true then ui.set_int("Antiaim.yaw_offset", -90) else ui.set_int("Antiaim.yaw_offset", 90) end else ui.set_int("Antiaim.yaw_offset", 0) end end end local function Legbreak() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() if ui.get_bool("Leg Breaker") and cmd.get_send_packet() == true then if is_alive == true then if switch then switch = false else switch = true end if switch then ui.set_int("Misc.leg_movement", 0) else ui.set_int("Misc.leg_movement", 1) end else ui.set_int("Misc.leg_movement", 1) end end end local function paint2() local sc = { x = engine.get_screen_width(), y = engine.get_screen_height() } local size = render.get_text_width(font) offset = 10 if ui.get_bool("Viewmodel in scope") then if ui.get_keybind_state( "misc.third_person_key" ) then console.set_int( "fov_cs_debug", 0 ) else console.set_int( "fov_cs_debug", 90 ) end else console.set_int( "fov_cs_debug", 0 ) end end events.register_event("player_death", function(e) if ui.get_bool("Divine Killsay") then local attacker = e:get_int("attacker") local attacker_to_player = engine.get_player_for_user_id(attacker) local lp_idx = engine.get_local_player_index() if attacker_to_player == lp_idx then phrases = {"divine.lua 最佳LUA", "get good. get divine.lua", "最佳LUA discord.gg/bscwgjRhXb", "divine.lua - best rawetrip lua"} randomz = math.random(1,4) console.execute_client_cmd("say " .. phrases[randomz]) end end end) local function getvector() if not entitylist.get_local_player():is_alive() then return end local sc = { x = engine.get_screen_width(), y = engine.get_screen_height() } local dtsize = render.get_text_width(font, "dt") local hidesize = render.get_text_width(font, "hide") local dmgsize = render.get_text_width(font, "dmg") local offset = 10 local color1 = menu.get_color("Divine New color") local r, g, b= color1:r(), color1:g(), color1:b() local local_player = entitylist.get_local_player() local is_alive = local_player:is_alive() local body_yaw = antiaim.get_body_yaw(ui.get_keybind_state(keybinds.flip_desync)) local body_yaw_aa = math.max(-60, math.min(60, math.round(body_yaw, 1))) local body_yaw_abs = math.abs(body_yaw_aa) local body_yaw_gay = math.floor(body_yaw_abs) if ui.get_bool("Divine New") then if body_yaw_aa >= 10 then render.text(defaultsmall, sc.x/2 +6, sc.y/2+23, color.new(255,255,255,255), "°") offset = offset + 5 render.text(defaultsmall, sc.x/2 -9, sc.y/2+23, color.new(255,255,255,255), body_yaw_gay) offset = offset + 5 elseif body_yaw_aa < 10 then render.text(defaultsmall, sc.x/2 +6, sc.y/2+23, color.new(255,255,255,255), "°") offset = offset + 5 render.text(defaultsmall, sc.x/2 -8, sc.y/2+23, color.new(255,255,255,255), body_yaw_gay) offset = offset + 5 end if is_alive == true then if body_yaw_aa > 0 then render.gradient(sc.x/2, sc.y/2+ 40, body_yaw_aa, 1, color.new(r,g,b), color.new(0, 0, 0, 0)) render.gradient(sc.x/2 - body_yaw_aa, sc.y/2 + 40, body_yaw_aa, 1, color.new(0, 0, 0, 0), color.new(r,g,b)) render.text(default, sc.x/2 - 35, sc.y/1.95 +28, color.new(255, 255, 255,255), "DIVINE",true,false) render.text(default, sc.x/2 + 10 , sc.y/1.95 +28, color.new(r,g,b), "YAW",true,false) elseif body_yaw_aa < 0 then render.gradient(sc.x/2, sc.y/2+ 40, body_yaw_aa, 1, color.new(r,g,b), color.new(0, 0, 0, 0)) render.gradient(sc.x/2 - body_yaw_aa, sc.y/2 + 40, body_yaw_aa, 1, color.new(0, 0, 0, 0), color.new(r,g,b)) render.text(default, sc.x/2 - 35, sc.y/1.95 +28, color.new(r,g,b), "DIVINE",true,false) render.text(default, sc.x/2 + 10, sc.y/1.95 +28, color.new(255, 255, 255,255), "YAW",true,false) end if ui.get_keybind_state(keybinds.double_tap) then render.text(defaultsmall, sc.x/2-5 , sc.y/2 + 34 + offset, color.new(83,251,70,255), "DT",true,false)  offset = offset + 12 end if ui.get_keybind_state(keybinds.hide_shots) then render.text(defaultsmall, sc.x/2-23, sc.y/2 + 34 + offset, color.new(83,251,70,255), "ON-SHOT",true,false)  offset = offset + 12 end if ui.get_keybind_state(keybinds.damage_override) then render.text(defaultsmall, sc.x/2-10 , sc.y/2 + 34 + offset, color.new(83,251,70,255), "DMG",true,false)  offset = offset + 12 end end end end local function lowdrange() local ibl ui.get_int("0Antiaim.inverted_body_lean") local bl ui.get_int("0Antiaim.body_lean") local ds ui.get_int("0Antiaim.desync_range") local ids ui.get_int("0Antiaim.inverted_desync_range") local aay ui.get_int("Antiaim.yaw_offset") if ui.get_bool("Low desync range on dt") and ui.get_keybind_state(keybinds.double_tap) then ui.set_int("0Antiaim.desync_range", 14) ui.set_int("0Antiaim.inverted_desync_range", 14) ui.set_int("Antiaim.yaw_offset", 0) ui.set_int("0Antiaim.inverted_body_lean", 0) ui.set_int("0Antiaim.body_lean", 0) end end local strings_value = 14 local labels = { "D", "Di", "Divi", "Divin", "Divine", "Divine.l", "Divine.lu", "Divine.lua", "Divine.lu", "Divine.l", "Divine", "Divin", "Divi", "Div", "Di", "D" } local first = 0 local second = 0 local function Clantag() if ui.get_bool("Divine Clantag") then if first < globalvars.get_tickcount() then second = second + 1 if second > strings_value then second = 0 end engine.set_clantag(labels[second]) first = globalvars.get_tickcount() + 20 end end end events.register_event("weapon_fire", function(e) if ui.get_bool("Desync on Shot") then if switch then switch = false else switch = true end if switch then ui.set_int("0Antiaim.body_lean", 100) ui.set_int("0Antiaim.inverted_body_lean", 100) ui.set_int("0Antiaim.desync_range",60) ui.set_int("0Antiaim.inverted_desync_range",60) ui.set_int("Antiaim.yaw_offset"-20) end end end) local watermarkfont = render.setup_font("Verdana", 12) local x_wat = 0 local  clor = ui.get_color("color filled") local screen_w = engine.get_screen_width() local screen_h = engine.get_screen_height() local userdata = engine.get_gamename() local datetime = globalvars.get_time() local serverip = globalvars.get_server_address() local sundwat = render.get_text_width(watermarkfont, "divine | " .. userdata .. " | " .. globalvars.get_ping() .. "ms" .. " |  " .. datetime.. " | ".. "IP:".. serverip) local function watermark() if not ui.get_bool("Divine Watermark") then return end if ui.get_bool("Divine Watermark") then local clor = ui.get_color("color filled") render.rect_filled(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 17, color.new(0,0,0,120)) render.rect_filled(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 2, clor) render.gradient(screen_w - sundwat - 10 + x_wat, 10, sundwat + 4, 2, clor, clor) render.text(watermarkfont, screen_w - sundwat - 10 + 2 + x_wat, 13, color.new(255,255,255,255), "divine | " .. userdata .. " | " .. globalvars.get_ping() .. "ms" .. " |  " .. datetime.. " | ".. "IP:".. serverip) end end local function keybi() if ui.get_bool("Enable keybinds") then local x = ui.get_int("x") local y = ui.get_int("y") local offsett = 15 local clor = ui.get_color("Color") local hsmode = ui.get_keybind_mode(keybinds.hide_shots) local dtmode = ui.get_keybind_mode(keybinds.double_tap) local apmode = ui.get_keybind_mode(keybinds.automatic_peek) local spmode = ui.get_keybind_mode(keybinds.safe_points) local aamode = ui.get_keybind_mode(keybinds.flip_desync) local baimode = ui.get_keybind_mode(keybinds.body_aim) local swmode = ui.get_keybind_mode(keybinds.slowwalk) 
        local fdmode = ui.get_keybind_mode(keybinds.fakeduck) 
        local ejmode = ui.get_keybind_mode(keybinds.edge_jump) local dmgmode = ui.get_keybind_mode(keybinds.damage_override) if ui.get_bool("Enable keybinds") then render.rect_filled(x, y, 120, 2, clor) end render.rect_filled(x, y + 2, 120, 15, color.new(0,0,0, 180)) render.text(keybindss, x + 40 , y + 3, color.new(255,255,255), "[divine]") if (ui.get_keybind_state(keybinds.double_tap)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "double tap") render.text(keybindss, x + 110 - 5 - 5 - 2,y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.hide_shots)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "hide shots") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.flip_desync)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "Invert AA") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.body_aim)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "body aim") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.slowwalk)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "slow walk") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.fakeduck)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "fake duck") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.edge_jump)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "edge jump") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.automatic_peek)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "auto peek") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.damage_override)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "damage override") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end if (ui.get_keybind_state(keybinds.safe_points)) then render.text(keybindss, x + 2, y + 3 + offsett, color.new(255,255,255), "safe points") render.text(keybindss, x + 110 - 5 - 5 - 2, y + 3 + offsett, color.new(255,255,255), "[" .. "on" .. "]") offsett = offsett + 15 end end end local function abf(shot_info) if not engine.is_in_game() then return end if not entitylist.get_local_player():is_alive() then return end local abf = { switch = ui.get_keybind_state(keybinds.flip_desync) } if ui.get_bool("AntiBrute Force") and ui.get_int("AntiBrute Force:")==0 then if abf.switch then ui.set_keybind_state(keybinds.flip_desync, false) end if not abf.switch then ui.set_keybind_state(keybinds.flip_desync, true) end end end local function onp() paint2(); adaptiveragebot(); lowdrange(); Clantag(); watermark(); keybi(); visual_controller.indicators(); fakelag(); getvector(); end local function cm() visual_controller.update_choke(); pitchzero(); idealtick(); aayawpresets(); attargets(); aajitterpresets(); bodyleanpresets(); fakeflick(); Legbreak(); invertaaon(); lagsynctype(); aadesyncpresets(); slowwalk(); end cheat.RegisterCallback("on_shot", abf) cheat.RegisterCallback("on_paint", onp) cheat.RegisterCallback("on_createmove", cm)
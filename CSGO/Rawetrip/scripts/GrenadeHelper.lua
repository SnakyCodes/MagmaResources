  if not file.exists(engine.get_winpath("appdata").."\\rawetripp\\Scripts\\locations.lua") then      cheat.popup("Grenade Helper", "Please, install locations")      return  end    local font = render.setup_font("Verdana", 12)  local weapon_font = render.setup_weapon_font(18)    local function lerp(start, _end, time, do_extraanim) if (not do_extraanim and math.floor(start) == _end) then return _end end; time = globalvars.get_frametime() * (time * 175); if time < 0 then time = 0.01 elseif time > 1 then time = 1 end; return (_end - start) * time + start end    local Path = engine.get_winpath("appdata").."\\rawetripp\\Scripts\\locations.lua"  local data = file.read(Path)  local nades = load("return " .. data)()    local movepos = vector.new(0,0,0)  local returned_to_start_pos = true    local retable = {}  local classiclight = {}  local classicdark = {}  local nade_type = {}    local pressed_keys, last_pressed_keys, input_system = {}, {}, {}  input_system.update = function() for i = 1, 255 do last_pressed_keys[i] = pressed_keys[i];pressed_keys[i] = engine.get_active_key(i);end;end  input_system.is_key_down = function(key) return pressed_keys[key];end  input_system.is_key_pressed = function(key) return pressed_keys[key] and not last_pressed_keys[key];end  input_system.is_key_released = function(key) return not pressed_keys[key] and last_pressed_keys[key];end    local key = 0  local key_active = false    local key_names = {"-", "mouse1", "mouse2", "break", "mouse3", "mouse4", "mouse5", "-", "backspace", "tab", "-", "-", "-", "enter", "-", "-", "shift", "control", "alt", "pause", "capslock", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "space", "page up", "page down", "end", "home", "left", "up", "right", "down", "-", "Print", "-", "print screen", "insert", "delete", "-", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "-", "-", "-", "-", "-", "Error", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "left windows", "right windows", "-", "-", "-", "insert", "end", "down", "page down", "left", "numpad 5", "right", "home", "up", "page up", "*", "+", "_", "-", ".", "/", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "f19", "f20", "f21", "f22", "f23", "f24", "-", "-", "-", "-", "-", "-", "-", "-", "number lock", "scroll lock", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "shift", "right shift", "control", "right control", "menu", "right menu", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "next", "previous", "stop", "toggle", "-", "-", "-", "-", "-", "-", ";", "+", ",", "-", ".", "/?", "~", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "[{", "\\|", "}]", "'\"", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"}    ui.add_combobox("Helper Theme", { "Default", "Classic Light", "Classic Dark" } )  ui.add_combobox("Key", key_names)  ui.add_sliderint("Distance", 650, 3000)    local function update_hotkey()      key = ui.get_int("Key")      key_active = input_system.is_key_down(key);  end    local mtype = "Throw"    local function render_nades()        local distance_to_nade = ui.get_int("Distance")        if not entitylist.get_local_player():is_alive() then return end        for i = 1, #nades do            if retable[i] == nil then              retable[i] = {h = 42, alpha = 0, alphasmall = 0, ytext = 3, alphapenis = 0, gradientwidth = 0, arrowanim = 29, textanim = 46, gradanim = 41, allwidth = 92, nadesanim = 0, glow_length = 0}          end          if classiclight[i] == nil then              classiclight[i] = {w = 32, line_height = 0, alpha = 0, alphasmall = 0, nadealpha = 0, glow_length = 0}          end          if classicdark[i] == nil then              classicdark[i] = {w = 32, line_height = 0, alpha = 0, alphasmall = 0, nadealpha = 0, glow_length = 0}          end          if nade_type[i] == nil then              nade_type[i] = { icon = "l" }          end            local weapname = weapon.get_name(entitylist.get_weapon_by_player(entitylist.get_local_player()))            local nade_result = engine.get_level_name_short() == nades[i].map and weapname == "MOLOTOV" or engine.get_level_name_short() == nades[i].map and weapname == "INCENDIARY"            if nades[i].grenade == "Molotov" then              nade_result = engine.get_level_name_short() == nades[i].map and weapname == "MOLOTOV" or engine.get_level_name_short() == nades[i].map and weapname == "INCENDIARY"              nade_type[i].icon = "l"          end          if nades[i].grenade == "He grenade" then              nade_result = engine.get_level_name_short() == nades[i].map and weapname == "HE GRENADE"              nade_type[i].icon = "j"          end          if nades[i].grenade == "Smoke grenade" then              nade_result = engine.get_level_name_short() == nades[i].map and weapname == "SMOKE"              nade_type[i].icon = "k"          end            if nade_result then                  if entitylist.get_local_player():get_absorigin():dist_to(nades[i].vector_one) <= distance_to_nade then                    local wts = render.world_to_screen(nades[i].vector_one)                                          if entitylist.get_local_player():get_absorigin():dist_to(nades[i].vector_one) <= distance_to_nade - 350 then                      retable[i].h = lerp(retable[i].h, 42, 0.05, false)                      retable[i].ytext = lerp(retable[i].ytext, 25, 0.05, false)                      retable[i].allwidth = lerp(retable[i].allwidth, 92, 0.05, false)                      retable[i].nadesanim = lerp(retable[i].nadesanim, 255, 0.08, false)                                              classiclight[i].nadealpha = lerp(classiclight[i].nadealpha, 255, 0.05, false)                      classiclight[i].w = lerp(classiclight[i].w, 57 + render.get_text_width(font, nades[i].name) + 15, 0.05, false)                      classiclight[i].line_height = lerp(classiclight[i].line_height, 24, 0.05, false)                                                                    classicdark[i].nadealpha = lerp(classicdark[i].nadealpha, 255, 0.05, false)                      classicdark[i].w = lerp(classicdark[i].w, 57 + render.get_text_width(font, nades[i].name) + 15, 0.05, false)                      classicdark[i].line_height = lerp(classicdark[i].line_height, 24, 0.05, false)                                          else                      retable[i].h = lerp(retable[i].h, 22, 0.05, false)                      retable[i].ytext = lerp(retable[i].ytext, 3, 0.05, false)                      retable[i].allwidth = lerp(retable[i].allwidth, render.get_text_width(font, nades[i].name) + 10, 0.05, false)                      retable[i].nadesanim = lerp(retable[i].nadesanim, 0, 0.08, false)                                            classiclight[i].nadealpha = lerp(classiclight[i].nadealpha, 0, 0.05, false)                      classiclight[i].w = lerp(classiclight[i].w, 32, 0.05, false)                      classiclight[i].line_height = lerp(classiclight[i].line_height, 0, 0.05, false)                                                                    classicdark[i].nadealpha = lerp(classicdark[i].nadealpha, 0, 0.05, false)                      classicdark[i].w = lerp(classicdark[i].w, 32, 0.05, false)                      classicdark[i].line_height = lerp(classicdark[i].line_height, 0, 0.05, false)                                          end                    if entitylist.get_local_player():get_absorigin():dist_to(nades[i].vector_one) <= distance_to_nade - 100 then                      retable[i].alpha = lerp(retable[i].alpha, 255, 0.05, false)                      retable[i].alphasmall = lerp(retable[i].alphasmall, 120, 0.05, false)                                             classiclight[i].alpha = lerp(classiclight[i].alpha, 255, 0.05, false)                      classiclight[i].alphasmall = lerp(classiclight[i].alphasmall, 134, 0.05, false)                      classiclight[i].glow_length = lerp(classiclight[i].glow_length, 8, 0.05, false)                        classicdark[i].alpha = lerp(classicdark[i].alpha, 255, 0.05, false)                      classicdark[i].alphasmall = lerp(classicdark[i].alphasmall, 134, 0.05, false)                      classicdark[i].glow_length = lerp(classicdark[i].glow_length, 8, 0.05, false)                         else                      retable[i].alpha = lerp(retable[i].alpha, 0, 0.05, false)                      retable[i].alphasmall = lerp(retable[i].alphasmall, 0, 0.05, false)                          classiclight[i].alpha = lerp(classiclight[i].alpha, 0, 0.05, false)                      classiclight[i].alphasmall = lerp(classiclight[i].alphasmall, 0, 0.05, false)                      classiclight[i].glow_length = lerp(classiclight[i].glow_length, 0, 0.05, false)                             classicdark[i].alpha = lerp(classicdark[i].alpha, 0, 0.05, false)                      classicdark[i].alphasmall = lerp(classicdark[i].alphasmall, 0, 0.05, false)                      classicdark[i].glow_length = lerp(classicdark[i].glow_length, 0, 0.05, false)                              end                    if entitylist.get_local_player():get_absorigin():dist_to(nades[i].vector_one) <= 60 and key_active then                       movepos = nades[i].vector_one                      returned_to_start_pos = false                      mtype = nades[i].type                      if key_active then                          engine.set_view_angles(nades[i].eyepos)                      end                  end                    local rend = { x = wts.x - retable[i].allwidth/2, y = wts.y, w = retable[i].allwidth, h = 42}                    local render_classic_light = { x = wts.x - classiclight[i].w/2, y = wts.y, w = classiclight[i].w, h = 32 }                  local render_classic_dark = { x = wts.x - classicdark[i].w/2, y = wts.y, w = classicdark[i].w, h = 32 }                    local screen_x, screen_y = engine.get_screen_width(), engine.get_screen_height()                                      if ui.get_int("Helper Theme") == 0 then                      render.rect_filled_rounded(rend.x, rend.y - rend.h - 15, retable[i].allwidth, retable[i].h, 60, 3, color.new(16,22,32,retable[i].alpha))                      render.text(font, rend.x + 5, wts.y - rend.h - 15 + retable[i].ytext, color.new(255,255,255, retable[i].nadesanim), nades[i].grenade)                      render.rect_filled_rounded(rend.x, rend.y - rend.h - 15, retable[i].allwidth, 22, 60, 3, color.new(28,38,54,retable[i].alpha))                        render.text(font, rend.x + 5, wts.y - rend.h - 15 + 4, color.new(255,255,255, retable[i].alpha), nades[i].name)                        render.rect_filled(rend.x, rend.y - rend.h - 15 + 20,retable[i].allwidth, 1, color.new(40,55,77, retable[i].alpha))                        render.circle_filled_3d(nades[i].vector_one, 5, color.new(255, 255, 255,retable[i].alphasmall))                  end                    if ui.get_int("Helper Theme") == 1 then                        render.rect_filled(render_classic_light.x, render_classic_light.y - render_classic_light.h, render_classic_light.w, render_classic_light.h, color.new(255,255,255,classiclight[i].alphasmall))                       render.rect_filled(render_classic_light.x + 32, render_classic_light.y - render_classic_light.h + 4, 1, classiclight[i].line_height, color.new(0,0,0,classiclight[i].alpha))                        render.rect_shadow(render_classic_light.x, render_classic_light.y - render_classic_light.h, render_classic_light.w, render_classic_light.h, classiclight[i].glow_length, color.new(0,0,0,255))                        render.text(font, render_classic_light.x + 45, render_classic_light.y - render_classic_light.h + 10, color.new(0,0,0, classiclight[i].nadealpha), nades[i].name)                      render.text(weapon_font, render_classic_light.x + 9, render_classic_light.y - render_classic_light.h + 7, color.new(0,0,0, classiclight[i].alpha), nade_type[i].icon)                  end                    if ui.get_int("Helper Theme") == 2 then                        render.rect_filled(render_classic_dark.x, render_classic_dark.y - render_classic_dark.h, render_classic_dark.w, render_classic_dark.h, color.new(0,0,0,classicdark[i].alphasmall))                       render.rect_filled(render_classic_dark.x + 32, render_classic_dark.y - render_classic_dark.h + 4, 1, classicdark[i].line_height, color.new(255,255,255,classicdark[i].alpha))                        render.rect_shadow(render_classic_dark.x, render_classic_dark.y - render_classic_dark.h, render_classic_dark.w, render_classic_dark.h, classicdark[i].glow_length, color.new(0,0,0,255))                        render.text(font, render_classic_dark.x + 45, render_classic_dark.y - render_classic_dark.h + 10, color.new(255,255,255, classicdark[i].nadealpha), nades[i].name)                      render.text(weapon_font, render_classic_dark.x + 9, render_classic_dark.y - render_classic_dark.h + 7, color.new(255,255,255, classicdark[i].alpha), nade_type[i].icon)                  end                                  end            end        end    end    local function createmove()        local current_pos = entitylist.get_local_player():get_absorigin()        if movepos.x ~= 0 and movepos.y ~= 0 and movepos.z ~= 0  then                 if not returned_to_start_pos then                if key_active and mtype == "Throw" and entitylist.get_local_player():get_velocity():length_2d_sqr() < 2 and current_pos:dist_to( movepos ) < 1 then                  cmd.set_button_state(1, 1)              end                if key_active and mtype == "JumpThrow" and entitylist.get_local_player():get_velocity():length_2d_sqr() < 2 and current_pos:dist_to( movepos ) < 1 then                  cmd.set_button_state(2, 1)                  cmd.set_button_state(1, 1)              end                local vec_forward = {                   x = current_pos.x - movepos.x,                  y = current_pos.y - movepos.y,                  z = current_pos.z - movepos.z              }                    local yaw = engine.get_view_angles().y                    local t_velocity = {                  x = vec_forward.x * math.cos(yaw / 180 * math.pi) + vec_forward.y * math.sin(yaw / 180 * math.pi),                  y = vec_forward.y * math.cos(yaw / 180 * math.pi) - vec_forward.x * math.sin(yaw / 180 * math.pi),                  z = vec_forward.z              }                    cmd.forwardmove(-t_velocity.x * 20)              cmd.sidemove(t_velocity.y * 20)                if (movepos:dist_to(current_pos) < 0.1)  then                  returned_to_start_pos = true              end                 end                end     end        local function paint()        render_nades()      update_hotkey()      input_system.update()    end
cheat.RegisterCallback("on_paint", paint)
cheat.RegisterCallback("on_createmove", createmove)